GLTEXBUFFER(3G) 		  OpenGL 3.3		       GLTEXBUFFER(3G)



NAME
       glTexBuffer - attach the storage for a buffer object to the active
       buffer texture

C SPECIFICATION
       void glTexBuffer(GLenum target, GLenum internalFormat, Gluintbuffer);

PARAMETERS
       target
	   Specifies the target of the operation and must be
	   GL_TEXTURE_BUFFER.

       internalFormat
	   Specifies the internal format of the data in the store belonging to
	   buffer.

       buffer
	   Specifies the name of the buffer object whose storage to attach to
	   the active buffer texture.

DESCRIPTION
       glTexBuffer attaches the storage for the buffer object named buffer to
       the active buffer texture, and specifies the internal format for the
       texel array found in the attached buffer object. If buffer is zero, any
       buffer object attached to the buffer texture is detached and no new
       buffer object is attached. If buffer is non-zero, it must be the name
       of an existing buffer object.  target must be GL_TEXTURE_BUFFER.
       internalformat specifies the storage format, and must be one of the
       following sized internal formats:

       +------------+-----------+------------+------+-----------------------------------+
       |	    |		|	     |	    |					|
       |	    |		|	     |	    |			      Component |
       |	    |		|	     |	    |					|
       |	    |		|	     |	    +--------+--------+--------+--------+
       |	    |		|	     |	    |	     |	      |        |	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |Sized	    | Base Type | Components | Norm |	0    |	 1    |   2    |   3	|
       |Internal    |		|	     |	    |	     |	      |        |	|
       |Format	    |		|	     |	    |	     |	      |        |	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R8	    | ubyte	| 1	     | YES  |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R16	    | ushort	| 1	     | YES  |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R16F     | half	| 1	     | NO   |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R32F     | float	| 1	     | NO   |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R8I	    | byte	| 1	     | NO   |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R16I     | short	| 1	     | NO   |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R32I     | int	| 1	     | NO   |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R8UI     | ubyte	| 1	     | NO   |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R16UI    | ushort	| 1	     | NO   |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_R32UI    | uint	| 1	     | NO   |	R    |	 0    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG8	    | ubyte	| 2	     | YES  |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG16     | ushort	| 2	     | YES  |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG16F    | half	| 2	     | NO   |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG32F    | float	| 2	     | NO   |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG8I     | byte	| 2	     | NO   |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG16I    | short	| 2	     | NO   |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG32I    | int	| 2	     | NO   |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG8UI    | ubyte	| 2	     | NO   |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG16UI   | ushort	| 2	     | NO   |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RG32UI   | uint	| 2	     | NO   |	R    |	 G    |   0    |   1	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA8    | uint	| 4	     | YES  |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA16   | short	| 4	     | YES  |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA16F  | half	| 4	     | NO   |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA32F  | float	| 4	     | NO   |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA8I   | byte	| 4	     | NO   |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA16I  | short	| 4	     | NO   |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA32I  | int	| 4	     | NO   |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA8UI  | ubyte	| 4	     | NO   |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA16UI | ushort	| 4	     | NO   |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+
       |GL_RGBA32UI | uint	| 4	     | NO   |	R    |	 G    |   B    |   A	|
       +------------+-----------+------------+------+--------+--------+--------+--------+

       When a buffer object is attached to a buffer texture, the buffer
       object's data store is taken as the texture's texel array. The number
       of texels in the buffer texture's texel array is given by



			       buffer_size


			       components x sizeof(base_type)


		   .PP where buffer_size is the size of the buffer object, in
       basic machine units and components and base type are the element count
       and base data type for elements, as specified in the table above. The
       number of texels in the texel array is then clamped to the
       implementation-dependent limit GL_MAX_TEXTURE_BUFFER_SIZE. When a
       buffer texture is accessed in a shader, the results of a texel fetch
       are undefined if the specified texel coordinate is negative, or greater
       than or equal to the clamped number of texels in the texel array.

ERRORS
       GL_INVALID_ENUM is generated if target is not GL_TEXTURE_BUFFER.


       GL_INVALID_ENUM is generated if internalFormat is not one of the
       accepted tokens.


       GL_INVALID_OPERATION is generated if buffer is not zero or the name of
       an existing buffer object.

NOTES
       glTexBuffer is available only if the GL version is 3.1 or greater.

ASSOCIATED GETS
       glGet() with argument GL_MAX_TEXTURE_BUFFER_SIZE

       glGet() with argument GL_TEXTURE_BINDING_BUFFER

       glGetTexLevelParameter() with argument
       GL_TEXTURE_BUFFER_DATA_STORE_BINDING

SEE ALSO
       glGenBuffers(), glBindBuffer(), glBufferData(), glDeleteBuffers(),
       glGenTextures(), glBindTexture(), glDeleteTextures()

COPYRIGHT
       Copyright (C) 2010 Khronos Group. This material may be distributed
       subject to the terms and conditions set forth in the Open Publication
       License, v 1.0, 8 June 1999.  http://opencontent.org/openpub/.



OpenGL 3.3			  03/08/2011		       GLTEXBUFFER(3G)
