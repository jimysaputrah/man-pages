PPI::Statement(3)     User Contributed Perl Documentation    PPI::Statement(3)



NAME
       PPI::Statement - The base class for Perl statements

INHERITANCE
	 PPI::Statement
	 isa PPI::Node
	     isa PPI::Element

DESCRIPTION
       PPI::Statement is the root class for all Perl statements. This includes
       (from perlsyn) "Declarations", "Simple Statements" and "Compound
       Statements".

       The class PPI::Statement itself represents a "Simple Statement" as
       defined in the perlsyn manpage.

STATEMENT CLASSES
       Please note that unless documented themselves, these classes are yet to
       be frozen/finalised. Names may change slightly or be added or removed.

   PPI::Statement::Scheduled
       This covers all "scheduled" blocks, chunks of code that are executed
       separately from the main body of the code, at a particular time. This
       includes all "BEGIN", "CHECK", "UNITCHECK", "INIT" and "END" blocks.

   PPI::Statement::Package
       A package declaration, as defined in perlfunc.

   PPI::Statement::Include
       A statement that loads or unloads another module.

       This includes 'use', 'no', and 'require' statements.

   PPI::Statement::Sub
       A named subroutine declaration, or forward declaration

   PPI::Statement::Variable
       A variable declaration statement. This could be either a straight
       declaration or also be an expression.

       This includes all 'my', 'state', 'local' and 'our' statements.

   PPI::Statement::Compound
       This covers the whole family of 'compound' statements, as described in
       perlsyn.

       This includes all statements starting with 'if', 'unless', 'for',
       'foreach' and 'while'. Note that this does NOT include 'do', as it is
       treated differently.

       All compound statements have implicit ends. That is, they do not end
       with a ';' statement terminator.

   PPI::Statement::Break
       A statement that breaks out of a structure.

       This includes all of 'redo', 'next', 'last' and 'return' statements.

   PPI::Statement::Given
       The kind of statement introduced in Perl 5.10 that starts with 'given'.
       This has an implicit end.

   PPI::Statement::When
       The kind of statement introduced in Perl 5.10 that starts with 'when'
       or 'default'.  This also has an implicit end.

   PPI::Statement::Data
       A special statement which encompasses an entire "__DATA__" block,
       including the initial '__DATA__' token itself and the entire contents.

   PPI::Statement::End
       A special statement which encompasses an entire __END__ block,
       including the initial '__END__' token itself and the entire contents,
       including any parsed PPI::Token::POD that may occur in it.

   PPI::Statement::Expression
       PPI::Statement::Expression is a little more speculative, and is
       intended to help represent the special rules relating to "expressions"
       such as in:

	 # Several examples of expression statements

	 # Boolean conditions
	 if ( expression ) { ... }

	 # Lists, such as for arguments
	 Foo->bar( expression )

   PPI::Statement::Null
       A null statement is a special case for where we encounter two
       consecutive statement terminators. ( ;; )

       The second terminator is given an entire statement of its own, but one
       that serves no purpose. Hence a 'null' statement.

       Theoretically, assuming a correct parsing of a perl file, all null
       statements are superfluous and should be able to be removed without
       damage to the file.

       But don't do that, in case PPI has parsed something wrong.

   PPI::Statement::UnmatchedBrace
       Because PPI is intended for use when parsing incorrect or incomplete
       code, the problem arises of what to do with a stray closing brace.

       Rather than die, it is allocated its own "unmatched brace" statement,
       which really means "unmatched closing brace". An unmatched open brace
       at the end of a file would become a structure with no contents and no
       closing brace.

       If the document loaded is intended to be correct and valid, finding a
       PPI::Statement::UnmatchedBrace in the PDOM is generally indicative of a
       misparse.

   PPI::Statement::Unknown
       This is used temporarily mid-parsing to hold statements for which the
       lexer cannot yet determine what class it should be, usually because
       there are insufficient clues, or it might be more than one thing.

       You should never encounter these in a fully parsed PDOM tree.

METHODS
       "PPI::Statement" itself has very few methods. Most of the time, you
       will be working with the more generic PPI::Element or PPI::Node
       methods, or one of the methods that are subclass-specific.

   label
       One factor common to most statements is their ability to be labeled.

       The "label" method returns the label for a statement, if one has been
       defined, but without the trailing colon. Take the following example

	 MYLABEL: while ( 1 .. 10 ) { last MYLABEL if $_ > 5 }

       For the above statement, the "label" method would return 'MYLABEL'.

       Returns false if the statement does not have a label.

   specialized
       Answer whether this is a plain statement or one that has more
       significance.

       Returns true if the statement is a subclass of this one, false
       otherwise.

   stable
       Much like the PPI::Document method of the same name, the ->stable
       method converts a statement to source and back again, to determine if a
       modified statement is still legal, and won't be interpreted in a
       different way.

       Returns true if the statement is stable, false if not, or "undef" on
       error.

TO DO
       - Complete, freeze and document the remaining classes

SUPPORT
       See the support section in the main module.

AUTHOR
       Adam Kennedy <adamk@cpan.org>

COPYRIGHT
       Copyright 2001 - 2011 Adam Kennedy.

       This program is free software; you can redistribute it and/or modify it
       under the same terms as Perl itself.

       The full text of the license can be found in the LICENSE file included
       with this module.



perl v5.12.4			  2011-02-25		     PPI::Statement(3)
