Class::MOP::Package(3)User Contributed Perl DocumentatioClass::MOP::Package(3)



NAME
       Class::MOP::Package - Package Meta Object

VERSION
       version 2.0205

DESCRIPTION
       The Package Protocol provides an abstraction of a Perl 5 package. A
       package is basically namespace, and this module provides methods for
       looking at and changing that namespace's symbol table.

METHODS
       Class::MOP::Package->initialize($package_name, %options)
	   This method creates a new "Class::MOP::Package" instance which
	   represents specified package. If an existing metaclass object
	   exists for the package, that will be returned instead. No options
	   are valid at the package level.

       Class::MOP::Package->reinitialize($package, %options)
	   This method forcibly removes any existing metaclass for the package
	   before calling "initialize". In contrast to "initialize", you may
	   also pass an existing "Class::MOP::Package" instance instead of
	   just a package name as $package.

	   Do not call this unless you know what you are doing.

       Class::MOP::Package->create($package, %options)
	   Creates a new "Class::MOP::Package" instance which represents the
	   specified package, and also does some initialization of that
	   package. Currently, this just does the same thing as "initialize",
	   but is overridden in subclasses, such as "Class::MOP::Class".

       Class::MOP::Package->create_anon(%options)
	   Creates a new anonymous package. Valid keys for %options are:

	   "weaken"
	       If this is true (the default), the instance stored in
	       "Class::MOP"'s metaclass cache will be weakened, so that the
	       anonymous package will be garbage collected when the returned
	       instance goes out of scope.

       $metapackage->is_anon
	   Returns true if the package is an anonymous package.

       $metapackage->name
	   This is returns the package's name, as passed to the constructor.

       $metapackage->namespace
	   This returns a hash reference to the package's symbol table. The
	   keys are symbol names and the values are typeglob references.

       $metapackage->add_package_symbol($variable_name, $initial_value)
	   This method accepts a variable name and an optional initial value.
	   The $variable_name must contain a leading sigil.

	   This method creates the variable in the package's symbol table, and
	   sets it to the initial value if one was provided.

       $metapackage->get_package_symbol($variable_name)
	   Given a variable name, this method returns the variable as a
	   reference or undef if it does not exist. The $variable_name must
	   contain a leading sigil.

       $metapackage->get_or_add_package_symbol($variable_name)
	   Given a variable name, this method returns the variable as a
	   reference.  If it does not exist, a default value will be generated
	   if possible. The $variable_name must contain a leading sigil.

       $metapackage->has_package_symbol($variable_name)
	   Returns true if there is a package variable defined for
	   $variable_name. The $variable_name must contain a leading sigil.

       $metapackage->remove_package_symbol($variable_name)
	   This will remove the package variable specified $variable_name. The
	   $variable_name must contain a leading sigil.

       $metapackage->remove_package_glob($glob_name)
	   Given the name of a glob, this will remove that glob from the
	   package's symbol table. Glob names do not include a sigil. Removing
	   the glob removes all variables and subroutines with the specified
	   name.

       $metapackage->list_all_package_symbols($type_filter)
	   This will list all the glob names associated with the current
	   package. These names do not have leading sigils.

	   You can provide an optional type filter, which should be one of
	   'SCALAR', 'ARRAY', 'HASH', or 'CODE'.

       $metapackage->get_all_package_symbols($type_filter)
	   This works much like "list_all_package_symbols", but it returns a
	   hash reference. The keys are glob names and the values are
	   references to the value for that name.

       Class::MOP::Package->meta
	   This will return a Class::MOP::Class instance for this class.

AUTHOR
       Stevan Little <stevan@iinteractive.com>

COPYRIGHT AND LICENSE
       This software is copyright (c) 2011 by Infinity Interactive, Inc..

       This is free software; you can redistribute it and/or modify it under
       the same terms as the Perl 5 programming language system itself.



perl v5.12.4			  2011-09-06		Class::MOP::Package(3)
