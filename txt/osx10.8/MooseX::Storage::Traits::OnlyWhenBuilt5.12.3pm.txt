MooseX::Storage::TraitUsernContributeMooseX::Storage::Traits::OnlyWhenBuilt(3)



NAME
       MooseX::Storage::Traits::OnlyWhenBuilt - A custom trait to bypass
       serialization

SYNOPSIS
	   {   package Point;
	       use Moose;
	       use MooseX::Storage;

	       with Storage( traits => [qw|OnlyWhenBuilt|] );

	       has 'x' => (is => 'rw', lazy_build => 1 );
	       has 'y' => (is => 'rw', lazy_build => 1 );
	       has 'z' => (is => 'rw', builder => '_build_z' );

	       sub _build_x { 3 }
	       sub _build_y { expensive_computation() }
	       sub _build_z { 3 }

	   }

	   my $p = Point->new( 'x' => 4 );

	   # the result of ->pack will contain:
	   # { x => 4, z => 3 }
	   $p->pack;

DESCRIPTION
       Sometimes you don't want a particular attribute to be part of the
       serialization if it has not been built yet. If you invoke "Storage()"
       as outlined in the "Synopsis", only attributes that have been built
       (ie, where the predicate returns 'true') will be serialized.  This
       avoids any potentially expensive computations.

       See the SYNOPSIS for a nice example that can be easily cargo-culted.

METHODS
   Introspection
       meta

BUGS
       All complex software has bugs lurking in it, and this module is no
       exception. If you find a bug please either email me, or add the bug to
       cpan-RT.

AUTHOR
       Stevan Little <stevan.little@iinteractive.com>

COPYRIGHT AND LICENSE
       Copyright 2007-2008 by Infinity Interactive, Inc.

       <http://www.iinteractive.com>

       This library is free software; you can redistribute it and/or modify it
       under the same terms as Perl itself.



perl v5.12.4			  201MooseX::Storage::Traits::OnlyWhenBuilt(3)
