
DAEMON(3)		 BSD Library Functions Manual		     DAEMON(3)

NAME
     daemon -- run in the background

LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include <stdlib.h>

     int
     daemon(int nochdir, int noclose);

DESCRIPTION
     The daemon() function is for programs wishing to detach themselves from
     the controlling terminal and run in the background as system daemons.  On
     Mac OS X, the use of this API is discouraged in favor of using
     launchd(8).

     Unless the argument nochdir is non-zero, daemon() changes the current
     working directory to the root (/).

     Unless the argument noclose is non-zero, daemon() will redirect standard
     input, standard output, and standard error to /dev/null.

RETURN VALUES
     The daemon() function returns the value 0 if successful; otherwise the
     value -1 is returned and the global variable errno is set to indicate the
     error.

ERRORS
     The daemon() function may fail and set errno for any of the errors speci-
     fied for the library functions fork(2) and setsid(2).

SEE ALSO
     fork(2), setsid(2), sigaction(2)

HISTORY
     The daemon() function first appeared in 4.4BSD.

CAVEATS
     Unless the noclose argument is non-zero, daemon() will close the first
     three file descriptors and redirect them to /dev/null.  Normally, these
     correspond to standard input, standard output, and standard error.  How-
     ever, if any of those file descriptors refer to something else, they will
     still be closed, resulting in incorrect behavior of the calling program.
     This can happen if any of standard input, standard output, or standard
     error have been closed before the program was run.  Programs using
     daemon() should therefore either call daemon() before opening any files
     or sockets, or verify that any file descriptors obtained have values
     greater than 2.

     The daemon() function temporarily ignores SIGHUP while calling setsid(2)
     to prevent a parent session group leader's calls to fork(2) and then
     _exit(2) from prematurely terminating the child process.

BSD				 June 9, 1993				   BSD
